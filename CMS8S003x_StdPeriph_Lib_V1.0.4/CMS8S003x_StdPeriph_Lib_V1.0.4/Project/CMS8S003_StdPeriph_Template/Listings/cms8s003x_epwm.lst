C51 COMPILER V9.59.0.0   CMS8S003X_EPWM                                                    06/27/2018 00:53:08 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE CMS8S003X_EPWM
OBJECT MODULE PLACED IN .\Objects\cms8s003x_epwm.obj
COMPILER INVOKED BY: D:\Install software\keil5\C51\BIN\C51.EXE ..\..\Libraries\CMS8S003_StdPeriph_Driver\src\cms8s003x_e
                    -pwm.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\Libraries\CMS8S003_StdPeriph_Driver\inc) DEBUG PRINT(.\Listings\cms8s00
                    -3x_epwm.lst) TABS(2) OBJECT(.\Objects\cms8s003x_epwm.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file    cms8s003x_epwm.c
   4            * @author  LI WEI
   5            * @version V1.0.3
   6            * @date    04/24/2018
   7            * @brief   This file provides all the EPWM firmware functions.
   8            ******************************************************************************
   9            * @copy
  10            *
  11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13            * TIME. AS A RESULT, CMSemicon SHALL NOT BE HELD LIABLE FOR ANY
  14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17            *
  18            * <h2><center>&copy; COPYRIGHT 2018 CMSemicon</center></h2>
  19            */
  20          
  21          /* Includes ------------------------------------------------------------------*/
  22          #include "cms8s003x_epwm.h"
  23          
  24          /** @addtogroup CMS8S003x_StdPeriph_Driver
  25            * @{
  26            */
  27          
  28          /* Private typedef -----------------------------------------------------------*/
  29          /* Private define ------------------------------------------------------------*/
  30          /* Private macro -------------------------------------------------------------*/
  31          /* Private variables ---------------------------------------------------------*/
  32          /* Private function prototypes -----------------------------------------------*/
  33          /* Private functions ---------------------------------------------------------*/
  34          /* Public functions ----------------------------------------------------------*/
  35          
  36          /**
  37            * @addtogroup EPWM_Public_Functions
  38            * @{
  39            */
  40          
  41          /**
  42            * @brief  Deinitializes the EPWM peripheral registers to their default
  43            *         reset values.
  44            * @param  None
  45            * @retval None
  46            */
  47          void EPWM_DeInit(void)
  48          {
  49   1        PWMCON &= 0x00;
  50   1        PWMOE &= 0x00;
  51   1      }
  52          
  53          /**
C51 COMPILER V9.59.0.0   CMS8S003X_EPWM                                                    06/27/2018 00:53:08 PAGE 2   

  54            * @brief  Initializes the EPWM function according to the specified parameters.
  55            * @param  BEEP_Prescaler1 Prescaler1 selection.
  56            *         This parameter can be one of the values of @ref BEEP_Prescaler1_TypeDef.
  57            * @param  BEEP_Prescaler2 Prescaler2 selection.
  58            *         This parameter can be one of the values of 1-255.
  59            * @note  The result BEEP frequency is: SystemClock/2*BEEP_Prescaler1/BEEP_Prescaler2
  60            * @retval None
  61            */
  62          void EPWM_Init(EPWM_Init_TypeDef *EPWM_Init)
  63          {
  64   1        uint8_t i = 0;
  65   1        
  66   1        /* Set EPWM control config */
  67   1        PWMCON &= 0x00;
  68   1        PWMCON = (((uint8_t)EPWM_Init->Mode) | ((uint8_t)EPWM_Init->Group) | ((uint8_t)EPWM_Init->Aligh.AlignStyl
             -e)); 
  69   1        if(AlignStyle_Center == EPWM_Init->Aligh.AlignStyle)
  70   1        {
  71   2          PWMCON |= ((uint8_t)EPWM_Init->Aligh.Align_TypeDef.CenterAlign);
  72   2        }
  73   1        /*else if(AlignStyle_Edge == EPWM_Init->Aligh.AlignStyle)
  74   1        {
  75   1        
  76   1        }*/
  77   1        
  78   1        /* Set group EPWM clock prescaler */
  79   1        /* Set EPWM01 clock prescaler */  
  80   1        PWM01PSC &= 0x00;
  81   1        PWM01PSC = ((uint8_t)EPWM_Init->GroupPrescaler.EPWM01_Prescaler);
  82   1        /* Set EPWM23 clock prescaler */
  83   1        PWM23PSC &= 0x00;
  84   1        PWM23PSC = ((uint8_t)EPWM_Init->GroupPrescaler.EPWM23_Prescaler);
  85   1        /* Set EPWM45 clock prescaler */
  86   1        PWM45PSC &= 0x00;
  87   1        PWM45PSC = ((uint8_t)EPWM_Init->GroupPrescaler.EPWM45_Prescaler);
  88   1        #if 0
                while(i < 6)
                {
                  if(((EPWM_Init->EPWMChannel) >> i) & 0x01)
                  {
                      /* Set EPWM clock prescaler */
                      *(volatile unsigned char xdata *)(PWMDIVBASE + i) = 0x00;
                      *(volatile unsigned char xdata *)(PWMDIVBASE + i) = ((uint8_t)EPWM_Init->Prescaler);
                    
                      /* Set period value */
                      *(volatile unsigned char xdata *)(PWMPLBASE + i * 2) &= 0x00;
                      *(volatile unsigned char xdata *)(PWMPHBASE + i * 2) &= 0x00;
                      *(volatile unsigned char xdata *)(PWMPLBASE + i * 2) = ((uint8_t)EPWM_Init->PeriodValue);
                      *(volatile unsigned char xdata *)(PWMPHBASE + i * 2) = ((uint8_t)(EPWM_Init->PeriodValue >> 8));
                      
                      /* Set compare value */
                      *(volatile unsigned char xdata *)(PWMDLBASE + i * 2) &= 0x00;
                      *(volatile unsigned char xdata *)(PWMDHBASE + i * 2) &= 0x00;
                      *(volatile unsigned char xdata *)(PWMDLBASE + i * 2) = ((uint8_t)EPWM_Init->CompareValue);
                      *(volatile unsigned char xdata *)(PWMDHBASE + i * 2) = ((uint8_t)(EPWM_Init->CompareValue >> 8));
                  
                      /* Set down compare value */
                      *(volatile unsigned char xdata *)(PWMDDLBASE + i * 2) &= 0x00;
                      *(volatile unsigned char xdata *)(PWMDDHBASE + i * 2) &= 0x00;
                      *(volatile unsigned char xdata *)(PWMDDLBASE + i * 2) = ((uint8_t)EPWM_Init->DownCompareValue);
                      *(volatile unsigned char xdata *)(PWMDDHBASE + i * 2) = ((uint8_t)(EPWM_Init->DownCompareValue >> 8));
                  }
C51 COMPILER V9.59.0.0   CMS8S003X_EPWM                                                    06/27/2018 00:53:08 PAGE 3   

                  i++;
                }
                #endif PWM0PL
 118   1        /* Set data reload control */
 119   1        PWMLOADEN &= 0x00;
 120   1        PWMLOADEN = ((uint8_t)EPWM_Init->DataReload);
 121   1        
 122   1        /* Set EPWM output polarity */
 123   1        PWMPINV &= 0x00;
 124   1        PWMPINV = ((uint8_t)EPWM_Init->OPInverted);
 125   1        
 126   1        /* Set EPWM counter mode */
 127   1        PWMCNTM &= 0x00;
 128   1        PWMCNTM = ((uint8_t)EPWM_Init->CounterModeRepetitive);
 129   1        
 130   1        /* Set EPWM counter clear */
 131   1        PWMCNTCLR &= 0x00;
 132   1        PWMCNTCLR = ((uint8_t)EPWM_Init->CounterZero);
 133   1        
 134   1        /* Dead zone enable */
 135   1        PWMDTE &= 0x00;
 136   1        PWMDTE = ((uint8_t)EPWM_Init->DeadZoneEnable);
 137   1        
 138   1        /* Set dead zone delay time */
 139   1        if(EPWM_Init->DeadZoneTime.EPWMAll_DeadZone_Time)
 140   1        {
 141   2            PWM01DT = (EPWM_Init->DeadZoneTime.EPWMAll_DeadZone_Time);
 142   2            PWM23DT = (EPWM_Init->DeadZoneTime.EPWMAll_DeadZone_Time);
 143   2            PWM45DT = (EPWM_Init->DeadZoneTime.EPWMAll_DeadZone_Time);
 144   2        }
 145   1        else
 146   1        {
 147   2            if(EPWM_Init->DeadZoneTime.EPWM01_DeadZone_Time)
 148   2            {
 149   3                PWM01DT = (EPWM_Init->DeadZoneTime.EPWM01_DeadZone_Time);
 150   3            }
 151   2            
 152   2            if(EPWM_Init->DeadZoneTime.EPWM23_DeadZone_Time)
 153   2            {
 154   3                PWM23DT = (EPWM_Init->DeadZoneTime.EPWM23_DeadZone_Time);
 155   3            }
 156   2            
 157   2            if(EPWM_Init->DeadZoneTime.EPWM45_DeadZone_Time)
 158   2            {
 159   3                PWM45DT = (EPWM_Init->DeadZoneTime.EPWM45_DeadZone_Time);
 160   3            }
 161   2        }
 162   1        
 163   1        /* Enable mask */
 164   1        PWMMASKE &= 0x00;
 165   1        PWMMASKE = ((uint8_t)EPWM_Init->Mask);
 166   1        
 167   1        /* Set mask high */  
 168   1        PWMMASKD &= 0x00;
 169   1        PWMMASKD = ((uint8_t)EPWM_Init->MaskHigh);
 170   1        
 171   1        /* Set EPWM brake config */
 172   1        PWMFBKC &= 0x00;
 173   1        PWMFBKC = (((uint8_t)EPWM_Init->Brake.BrakeEnable.Brake_CH0_ENABLE) |\
 174   1                  ((uint8_t)EPWM_Init->Brake.BrakeEnable.Brake_CH1_ENABLE << 1) |\
 175   1                  ((uint8_t)EPWM_Init->Brake.BrakeTrigger.Brake_CH0 << 2) |\
 176   1                  ((uint8_t)EPWM_Init->Brake.BrakeTrigger.Brake_CH1 << 3) |\
C51 COMPILER V9.59.0.0   CMS8S003X_EPWM                                                    06/27/2018 00:53:08 PAGE 4   

 177   1                  ((uint8_t)EPWM_Init->Brake.BrakeStart << 4) |\
 178   1                  ((uint8_t)EPWM_Init->Brake.BrakeClear << 5));
 179   1        
 180   1        /* Set EPWM brake output high */
 181   1        PWMFBKD &= 0X00;
 182   1        PWMFBKD = ((uint8_t)EPWM_Init->Brake.BrakeOutputHigh);
 183   1      }
 184          
 185          /**
 186            * @brief  Enable or disable the EPWM function.
 187            * @note   Initialisation of BEEP and LS RC calibration must be done before.
 188            * @param  NewState Indicates the new state of the BEEP function.
 189            * @retval None
 190            */
 191          void EPWM_Cmd(EPWM_Channel_TypeDef EPWM_Channel, FunctionalState NewState)
 192          {
 193   1        if (NewState != _DISABLE)
 194   1        {
 195   2          /* Enable the EPWM peripheral */
 196   2          PWMOE |= EPWM_Channel;
 197   2          
 198   2          /* Start work */
 199   2          PWMCNTE |= EPWM_Channel;
 200   2        }
 201   1        else
 202   1        {
 203   2          /* Disable the EPWM peripheral */
 204   2          PWMOE &= (uint8_t)(~EPWM_Channel);
 205   2          
 206   2          /* Start work */
 207   2          PWMCNTE &= (uint8_t)(~EPWM_Channel);
 208   2        }
 209   1      }
 210          
 211          void EPWM_Enable_DataReload(EPWM_DataReload_Typedef EPWMn_Load)
 212          {
 213   1        PWMLOADEN |= EPWMn_Load;
 214   1      }
 215          
 216          void EPWM_SetOutPolarity(EPWM_OP_TypeDef OP, EPWM_Channel_TypeDef CH)
 217          {
 218   1        if(EPWM_OP_Inverted == OP)
 219   1        {
 220   2            /* Enable the EPWM inverted */
 221   2            PWMPINV |= CH;
 222   2        }
 223   1        else if(EPWM_OP_NonInverted == OP)
 224   1        {
 225   2            /* Enable the EPWM inverted */
 226   2            PWMPINV &= (uint8_t)(~CH);
 227   2        }
 228   1      }
 229          
 230          void EPWM_SetCounterMode(EPWM_CounterMode_TypeDef CounterMode, EPWM_Channel_TypeDef CH)
 231          {
 232   1        if(EPWM_CounterMode_Repetitive == CounterMode)
 233   1        {
 234   2            /* Enable the EPWM counter mode repetitive */
 235   2            PWMCNTM |= CH;
 236   2        }
 237   1        else if(EPWM_CounterMode_OneShot == CounterMode)
 238   1        {
C51 COMPILER V9.59.0.0   CMS8S003X_EPWM                                                    06/27/2018 00:53:08 PAGE 5   

 239   2            /* Enable the EPWM counter mode one shot */
 240   2            PWMCNTM &= (uint8_t)(~CH);
 241   2        }
 242   1      }
 243          
 244          void EPWM_ClearCounter(EPWM_CounterZero_TypeDef CounterZero)
 245          {
 246   1        PWMCNTCLR |= CounterZero;
 247   1      }
 248          
 249          void EPEM_DeadZoneCmd(EPWM_DeadZone_TypeDef DeadZone, FunctionalState NewState)
 250          {
 251   1        if(NewState != _DISABLE)
 252   1        {
 253   2            /* Enable the EPWM dead zone */
 254   2            PWMDTE |= DeadZone;
 255   2        }
 256   1        else
 257   1        {
 258   2            /* Disable the EPWM dead zone */
 259   2            PWMDTE &= (uint8_t)(~DeadZone);
 260   2        }
 261   1      }
 262          
 263          void EPWM_MaskCmd(EPWM_Mask_TypeDef Mask, FunctionalState NewState)
 264          {
 265   1        if(NewState != _DISABLE)
 266   1        {
 267   2            /* Enable the EPWM mask */
 268   2            PWMMASKE |= ((uint8_t)Mask);
 269   2        }
 270   1        else
 271   1        {
 272   2            /* Disable the EPWM mask */
 273   2            PWMMASKE &= (uint8_t)(~Mask);
 274   2        }
 275   1      }
 276          
 277          void EPWM_MaskOutConfig(EPWM_Mask_TypeDef Mask, EPWM_Mask_Out_TypeDef MaskOut)
 278          {
 279   1        if(EPWM_Mask_Out_High == MaskOut)
 280   1        {
 281   2            /* Enable the EPWM mask high */
 282   2            PWMMASKD |= Mask;
 283   2        }
 284   1        else if(EPWM_Mask_Out_Low == MaskOut)
 285   1        {
 286   2            /* Enable the EPWM mask low */
 287   2            PWMMASKD &= (uint8_t)(~Mask);
 288   2        }
 289   1      }
 290          
 291          void EPWM_BrakeOutputConfig(EPWM_BrakePWMn_TypeDef BrakePWMn, EPWM_Brake_Output_TypeDef Brake_Output)
 292          {
 293   1        if(Output_High == Brake_Output)
 294   1        {
 295   2            /* Enable the EPWM mask high */
 296   2            PWMFBKD |= BrakePWMn;
 297   2        }
 298   1        else if(Output_Low == Brake_Output)
 299   1        {
 300   2            /* Enable the EPWM mask low */
C51 COMPILER V9.59.0.0   CMS8S003X_EPWM                                                    06/27/2018 00:53:08 PAGE 6   

 301   2            PWMFBKD &= (uint8_t)(~BrakePWMn);
 302   2        }
 303   1      }
 304          
 305          void EPWM_BrakeCmd(EPWM_Brake_CH_TypeDef BrakeCH, FunctionalState NewState)
 306          {
 307   1        if(NewState != _DISABLE)
 308   1        {
 309   2            /* Enable the EPWM brake CH0/CH1 */
 310   2            PWMFBKC |= ((uint8_t)BrakeCH);
 311   2          
 312   2            /* Start brake */
 313   2            PWMFBKC |= ((uint8_t)EPWM_BRAKE_START_BIT);
 314   2        }
 315   1        else
 316   1        {
 317   2            /* Disable the EPWM brake CH0/CH1 */
 318   2            PWMFBKC &= (uint8_t)(~BrakeCH);
 319   2          
 320   2            /* Disable brake */
 321   2            PWMFBKC &= (uint8_t)(~EPWM_BRAKE_START_BIT);
 322   2        }
 323   1      }
 324          
 325          void EPWM_PeriodITCmd(EPWM_PeriodIT_TypeDef PeriodIT, FunctionalState NewState)
 326          {
 327   1        if(NewState != _DISABLE)
 328   1        {
 329   2            /* Enable the EPWM Period IT */
 330   2            PWMPIE |= ((uint8_t)PeriodIT);
 331   2        }
 332   1        else
 333   1        {
 334   2            /* Disable the EPWM Period IT */
 335   2            PWMPIE &= (uint8_t)(~PeriodIT);
 336   2        }
 337   1      }
 338          
 339          void EPWM_ZeroITCmd(EPWM_ZeroIT_TypeDef ZeroIT, FunctionalState NewState)
 340          {
 341   1        if(NewState != _DISABLE)
 342   1        {
 343   2            /* Enable the EPWM zero IT */
 344   2            PWMZIE |= ((uint8_t)ZeroIT);
 345   2        }
 346   1        else
 347   1        {
 348   2            /* Disable the EPWM zero IT */
 349   2            PWMZIE &= (uint8_t)(~ZeroIT);
 350   2        }
 351   1      }
 352          
 353          FlagStatus EPWM_GetPeriodITStatus(EPWM_PeriodIT_TypeDef PeriodIT)
 354          {
 355   1        FlagStatus Flag = _RESET;
 356   1        
 357   1        if((PWMPIF & PeriodIT) != (uint8_t)_RESET)
 358   1        {
 359   2            Flag = _SET;
 360   2        }
 361   1        else
 362   1        {
C51 COMPILER V9.59.0.0   CMS8S003X_EPWM                                                    06/27/2018 00:53:08 PAGE 7   

 363   2            Flag = _RESET;
 364   2        }
 365   1        return Flag;
 366   1      }
 367          FlagStatus EPWM_GetZeroITStatus(EPWM_ZeroIT_TypeDef ZeroIT)
 368          {
 369   1        FlagStatus Flag = _RESET;
 370   1        
 371   1        if((PWMZIF & ZeroIT) != (uint8_t)_RESET)
 372   1        {
 373   2            Flag = _SET;
 374   2        }
 375   1        else
 376   1        {
 377   2            Flag = _RESET;
 378   2        }
 379   1        return Flag;
 380   1      }
 381          
 382          void EPWM_ClearPeriodITStatus(EPWM_PeriodIT_TypeDef PeriodIT)
 383          {
 384   1        PWMPIF &= (uint8_t)(~PeriodIT);
 385   1      }
 386          
 387          void EPWM_ClearZeroITStatus(EPWM_ZeroIT_TypeDef ZeroIT)
 388          {
 389   1        PWMZIF &= (uint8_t)(~ZeroIT);
 390   1      }
 391          
 392          
 393          /**
 394            * @}
 395            */
 396          
 397          /**
 398            * @}
 399            */
 400          
 401          /******************* (C) COPYRIGHT 2018 CMSemicon *****END OF FILE****/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    710    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

C51 COMPILER V9.59.0.0   CMS8S003X_ADC                                                     06/27/2018 00:53:08 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE CMS8S003X_ADC
OBJECT MODULE PLACED IN .\Objects\cms8s003x_adc.obj
COMPILER INVOKED BY: D:\Install software\keil5\C51\BIN\C51.EXE ..\..\Libraries\CMS8S003_StdPeriph_Driver\src\cms8s003x_a
                    -dc.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\Libraries\CMS8S003_StdPeriph_Driver\inc) DEBUG PRINT(.\Listings\cms8s003
                    -x_adc.lst) TABS(2) OBJECT(.\Objects\cms8s003x_adc.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file    cms8s003x_adc.c
   4            * @author  LI WEI
   5            * @version V1.0.3
   6            * @date    04/24/2018
   7            * @brief   This file provides all the ADC firmware functions.
   8            ******************************************************************************
   9            * @copy
  10            *
  11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13            * TIME. AS A RESULT, CMSemicon SHALL NOT BE HELD LIABLE FOR ANY
  14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17            *
  18            * <h2><center>&copy; COPYRIGHT 2018 CMSemicon</center></h2>
  19            */
  20          
  21          /* Includes ------------------------------------------------------------------*/
  22          #include "cms8s003x_adc.h"
  23          
  24          /** @addtogroup CMS8S003x_StdPeriph_Driver
  25            * @{
  26            */
  27          
  28          /* Private typedef -----------------------------------------------------------*/
  29          /* Private define ------------------------------------------------------------*/
  30          /* Private macro -------------------------------------------------------------*/
  31          /* Private variables ---------------------------------------------------------*/
  32          /* Private function prototypes -----------------------------------------------*/
  33          /* Private functions ---------------------------------------------------------*/
  34          /* Public functions ----------------------------------------------------------*/
  35          
  36          /**
  37            * @addtogroup ADC_Public_Functions
  38            * @{
  39            */
  40          
  41          /**
  42            * @brief  Deinitializes the BEEP peripheral registers to their default
  43            *         reset values.
  44            * @param  None
  45            * @retval None
  46            */
  47          void ADC_DeInit(void)
  48          {
  49   1        ADCON0 &= 0x00;
  50   1        ADCON1 &= 0x00;
  51   1        ADCON1 |= 0x40;
  52   1        ADCON2 &= 0x00;
  53   1        ADCMPC &= 0x00;
C51 COMPILER V9.59.0.0   CMS8S003X_ADC                                                     06/27/2018 00:53:08 PAGE 2   

  54   1        ADDLYL &= 0x00;
  55   1        ADRESH &= 0x00;
  56   1        ADRESL &= 0x00;
  57   1        ADCMPL |= 0xFF;
  58   1        ADCMPH |= 0xFF;
  59   1      }
  60          
  61          /**
  62            * @brief  Initializes the BEEP function according to the specified parameters.
  63            * @param  BEEP_Prescaler1 Prescaler1 selection.
  64            *         This parameter can be one of the values of @ref BEEP_Prescaler1_TypeDef.
  65            * @param  BEEP_Prescaler2 Prescaler2 selection.
  66            *         This parameter can be one of the values of 1-255.
  67            * @note  The result BEEP frequency is: SystemClock/2*BEEP_Prescaler1/BEEP_Prescaler2
  68            * @retval None
  69            */
  70          void ADC_Init(ADC_Init_TypeDef *ADC_Init)
  71          {
  72   1        uint8_t ADC_L = 0, ADC_H = 0;
  73   1        
  74   1        /* Set ADC conversition result format */
  75   1        ADCON0 &= 0x00;
  76   1        ADCON0 |= ((uint8_t)(ADC_Init->ResultFormat << 6));
  77   1        
  78   1        /* Set ADC prescaler and channel */
  79   1        ADCON1 &= 0x00;
  80   1        ADCON1 |= (((uint8_t)ADC_Init->Prescaler) | ((uint8_t)ADC_Init->Channel));
  81   1      
  82   1        /* Set ADC compare config */
  83   1        ADCMPC &= 0x00;
  84   1        ADCMPC |= (((uint8_t)(ADC_Init->Brake << 7)) | ((uint8_t)ADC_Init->CompOut));
  85   1        
  86   1        /* Set ADC compare value */
  87   1        ADC_L = (uint8_t)(ADC_Init->CompValue & 0xFF);
  88   1        ADC_H = (uint8_t)((ADC_Init->CompValue >> 8) & 0x0F);
  89   1        ADCMPL = ADC_L;
  90   1        ADCMPH = ADC_H;
  91   1      }
  92          
  93          /**
  94            * @brief  Enable or disable the BEEP function.
  95            * @note   Initialisation of BEEP and LS RC calibration must be done before.
  96            * @param  NewState Indicates the new state of the BEEP function.
  97            * @retval None
  98            */
  99          void ADC_Cmd(FunctionalState NewState)
 100          {
 101   1        if (NewState != _DISABLE)
 102   1        {
 103   2          /* Enable the ADC peripheral */
 104   2          ADCON1 |= (uint8_t)(ADC_ENABLE_BIT);
 105   2          ADCON0 |= (uint8_t)(ADC_START_BIT);
 106   2        }
 107   1        else
 108   1        {
 109   2          /* Disable the ADC peripheral */
 110   2          ADCON1 &= (uint8_t)(~ADC_ENABLE_BIT);
 111   2          ADCON0 &= (uint8_t)(~ADC_START_BIT);
 112   2        }
 113   1      }
 114          
 115          void ADC_ExternalTrigConfig(ADC_ExtTrigConfig_TypeDef *ADC_ExtConfig)
C51 COMPILER V9.59.0.0   CMS8S003X_ADC                                                     06/27/2018 00:53:08 PAGE 3   

 116          {
 117   1        uint8_t ADC_DelayTime = 0;
 118   1        
 119   1        /* Calculate ADC ext trigger delay time */
 120   1        ADC_DelayTime = (uint8_t)((ADC_ExtConfig->ExtTrigDelay >> 8) & 0x03);
 121   1        
 122   1        /* Set ADC ext trigger config */
 123   1        ADCON2 &= 0x00;
 124   1        ADCON2 |= (((uint8_t)ADC_ExtConfig->ExtTrigEvent) | ((uint8_t)ADC_ExtConfig->ExtTrigEdge) | ((uint8_t)ADC
             -_ExtConfig->ExtTrigPort));
 125   1      
 126   1        /* Set ADC ext trigger delay time */
 127   1        ADCMPC &= (~0x03);
 128   1        ADCMPC |= ADC_DelayTime;
 129   1        
 130   1        ADDLYL &= 0x00;
 131   1        ADDLYL |= ((uint8_t)ADC_ExtConfig->ExtTrigDelay);
 132   1      }
 133          
 134          void ADC_ExtTrig_Cmd(FunctionalState NewState)
 135          {
 136   1        if (NewState != _DISABLE)
 137   1        {
 138   2          /* Enable the ADC ExtTrig */
 139   2          ADCON2 |= (uint8_t)(ADC_EXT_TRIG_ENABLE_BIT);
 140   2        }
 141   1        else
 142   1        {
 143   2          /* Disable the ADC ExtTrig */
 144   2          ADCON2 &= (uint8_t)(~ADC_EXT_TRIG_ENABLE_BIT);
 145   2        }
 146   1      }
 147          
 148          void ADC_CH15_Input_Selection(ADC_CH15_Input_TypeDef CH15_Input)
 149          {
 150   1        /* Set ADC channel 15 input source */
 151   1        ADCON0 &= (~0x30);
 152   1        ADCON0 |= (uint8_t)CH15_Input;
 153   1      }
 154          
 155          uint16_t ADC_GetConversionValue(void)
 156          {
 157   1        uint8_t ADC_Format = 0;
 158   1        uint8_t ADC_L = 0, ADC_H = 0;
 159   1        uint16_t ADC_Result = 0;
 160   1        
 161   1        ADC_Format = (ADCON0 & 0x40) >> 6;
 162   1        ADC_L = ADRESL;
 163   1        ADC_H = ADRESH;
 164   1        
 165   1        if(ADC_Format_Left_Align == ADC_Format)
 166   1        {
 167   2          ADC_Result = (uint16_t)((uint16_t)ADC_L >> 4);
 168   2          ADC_Result |= (uint16_t)((uint16_t)ADC_H << 4);
 169   2        }
 170   1        else if(ADC_Format_Right_Align == ADC_Format)
 171   1        {
 172   2          ADC_Result = (uint16_t)ADC_L;
 173   2          ADC_Result |= (uint16_t)((uint16_t)ADC_H << 8);
 174   2        }
 175   1        
 176   1        return ADC_Result;
C51 COMPILER V9.59.0.0   CMS8S003X_ADC                                                     06/27/2018 00:53:08 PAGE 4   

 177   1      }
 178          
 179          void ADC_SetCompareValue(uint16_t CompValue)
 180          {
 181   1        uint8_t ADC_L = 0, ADC_H = 0;
 182   1        
 183   1        ADC_L = (uint8_t)(CompValue & 0xFF);
 184   1        ADC_H = (uint8_t)((CompValue >> 8) & 0x0F);
 185   1        
 186   1        ADCMPL = ADC_L;
 187   1        ADCMPH = ADC_H;
 188   1      }
 189          
 190          uint8_t ADC_GetCompareOutput(void)
 191          {
 192   1        return (uint8_t)((ADCMPC & ADC_COMP_OUT_BIT) >> 4);
 193   1      }
 194          
 195          /**
 196            * Set ADC compare output Polarity
 197            */
 198          void ADC_SetCompareOP(ADC_CompOut_TypeDef CompOut)
 199          {
 200   1        ADCMPC &= (~0x40);
 201   1        ADCMPC |= CompOut;
 202   1      }
 203          
 204          FlagStatus ADC_GetFlagStatus(ADC_Flag_TypeDef ADC_Flag)
 205          {
 206   1        FlagStatus Flag = _RESET;
 207   1        
 208   1        if(ADC_Flag_EOC == ADC_Flag)
 209   1        {
 210   2          if((ADCON0 & ADC_Flag) != (uint8_t)_RESET)
 211   2          {
 212   3              Flag = _SET;
 213   3          }
 214   2          else
 215   2          {
 216   3              Flag = _RESET;
 217   3          }
 218   2        }
 219   1        else if(ADC_Flag_CompOut == ADC_Flag)
 220   1        {
 221   2          if((ADCMPC & ADC_Flag) != (uint8_t)_RESET)
 222   2          {
 223   3              Flag = _SET;
 224   3          }
 225   2          else
 226   2          {
 227   3              Flag = _RESET;
 228   3          }
 229   2        }
 230   1        
 231   1        return Flag;
 232   1      }
 233          
 234          void ADC_ClearFlag(ADC_Flag_TypeDef ADC_Flag)
 235          {
 236   1        /* Invalid */
 237   1        /*if(ADC_Flag_EOC == ADC_Flag)
 238   1        {
C51 COMPILER V9.59.0.0   CMS8S003X_ADC                                                     06/27/2018 00:53:08 PAGE 5   

 239   1          ADCON0 &= (~ADC_Flag);
 240   1        }*/
 241   1      
 242   1      }
*** WARNING C280 IN LINE 234 OF ..\..\Libraries\CMS8S003_StdPeriph_Driver\src\cms8s003x_adc.c: 'ADC_Flag': unreferenced 
             -local variable
 243          /**
 244            * @}
 245            */
 246          
 247          /**
 248            * @}
 249            */
 250          
 251          /******************* (C) COPYRIGHT 2018 CMSemicon *****END OF FILE****/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    331    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)

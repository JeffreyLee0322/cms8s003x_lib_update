C51 COMPILER V9.59.0.0   CMS8S003X_ITC                                                     06/27/2018 00:53:09 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE CMS8S003X_ITC
OBJECT MODULE PLACED IN .\Objects\cms8s003x_itc.obj
COMPILER INVOKED BY: D:\Install software\keil5\C51\BIN\C51.EXE ..\..\Libraries\CMS8S003_StdPeriph_Driver\src\cms8s003x_i
                    -tc.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\Libraries\CMS8S003_StdPeriph_Driver\inc) DEBUG PRINT(.\Listings\cms8s003
                    -x_itc.lst) TABS(2) OBJECT(.\Objects\cms8s003x_itc.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file    cms8s003x_itc.c
   4            * @author  LI WEI
   5            * @version V1.0.3
   6            * @date    04/24/2018
   7            * @brief   This file provides all the ITC firmware functions.
   8            ******************************************************************************
   9            * @copy
  10            *
  11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13            * TIME. AS A RESULT, CMSemicon SHALL NOT BE HELD LIABLE FOR ANY
  14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17            *
  18            * <h2><center>&copy; COPYRIGHT 2018 CMSemicon</center></h2>
  19            */
  20          
  21          /* Includes ------------------------------------------------------------------*/
  22          #include "cms8s003x_itc.h"
  23          #include "cms8s003x_spi.h"
  24          #include "cms8s003x_tim01.h"
  25          #include "cms8s003x_tim2.h"
  26          #include "cms8s003x_gpio.h"
  27          #include "cms8s003x_uart.h"
  28          #include "cms8s003x_epwm.h"
  29          #include "cms8s003x_iic.h"
  30          #include "cms8s003x_wdg.h"
  31          
  32          /** @addtogroup CMS8S003x_StdPeriph_Driver
  33            * @{
  34            */
  35          
  36          /* Private typedef -----------------------------------------------------------*/
  37          /* Private define ------------------------------------------------------------*/
  38          /* Private macro -------------------------------------------------------------*/
  39          /* Private variables ---------------------------------------------------------*/
  40          uint32_t timer0Count = 0;
  41          uint32_t timer1Count = 0;
  42          
  43          uint16_t readCount_TIM0 = 0, readCount_TIM1 = 0;
  44          uint8_t IIC_SendTimes = 0;
  45          /* Private function prototypes -----------------------------------------------*/
  46          /* Private functions ---------------------------------------------------------*/
  47          
  48          /** @addtogroup ITC_Private_Functions
  49            * @{
  50            */
  51          
  52          
  53          
C51 COMPILER V9.59.0.0   CMS8S003X_ITC                                                     06/27/2018 00:53:09 PAGE 2   

  54          /**
  55            * @}
  56            */
  57          
  58          /** @addtogroup ITC_Public_Functions
  59            * @{
  60            */
  61          
  62          /**
  63            * @brief  Deinitializes the ITC registers to their default reset value.
  64            * @param  None
  65            * @retval None
  66           */
  67          void ITC_DeInit(void)
  68          {
  69   1      
  70   1      }
  71          
  72          //unsigned int times = 0;   
  73          void SPI_ISR() interrupt 22
  74          {
  75   1        FlagStatus status = 0;
  76   1        ITStatus  itS = 0;
  77   1        if(SPI_GetFlagStatus(Peripheral_SPI_Interrupt)) //SPI总中断指示位  清除具体的中断标志位后 此位自动清除
  78   1        {
  79   2          if(SPI_GetITStatus(SPI_FLAG_SPISIF))        //SPI传输完毕中断标志位 先读SPSR 再度写SPDR后清0
  80   2          {
  81   3             /*if(times<5)
  82   3             {
  83   3               Master_Received[times] = SPI_ReceiveData();
  84   3              
  85   3               if(times < 4)
  86   3                 SPI_SendData(0x40);
  87   3             }
  88   3             times++;*/
  89   3          }
  90   2          else if(SPI_GetITStatus(SPI_FLAG_WCOL))   //SPI 写冲突中断标志位 先读SPSR 再读写SPDR后清0
  91   2          {
  92   3      
  93   3          }
  94   2          else if(SPI_GetITStatus(SPI_FLAG_MODF))   //SPI模式错误中断标志 先读SPSR 再读写SPCR后清0
  95   2          {
  96   3          }
  97   2        }
  98   1      }
  99          
 100          
 101          void timer0_int (void) interrupt 1
 102          {
 103   1        //这里不需要判断中断标志位，且中断标志位硬件自动清零
 104   1        uint32_t counter = 0;
 105   1        readCount_TIM0 = TIM0_GetCounter();
 106   1        timer0Count++;
 107   1        if(timer0Count > 100) timer0Count = 0;
 108   1        if(timer0Count%2) GPIO_WriteBit(GPIO_PORT_1, GPIO_PIN_5, 1);
 109   1        else GPIO_WriteBit(GPIO_PORT_1, GPIO_PIN_5, 0);
 110   1        //counter = TIM0_GetCounter();
 111   1      }
 112          
 113          void timer1_int (void) interrupt 3
 114          {
 115   1        P1_5 =~ P1_5;
C51 COMPILER V9.59.0.0   CMS8S003X_ITC                                                     06/27/2018 00:53:09 PAGE 3   

 116   1        //TH1 = (uint8_t)((8192 - (uint16_t)(1000000.0 / 9600 / 0.25))>>5);
 117   1        //TL1 = (uint8_t)((8192 - (uint16_t)(1000000.0 / 9600 / 0.25))&0xFF);
 118   1        /*readCount_TIM1 = TIM1_GetCounter();
 119   1        timer1Count++;
 120   1        if(timer1Count > 100) timer1Count = 0;
 121   1        if(timer1Count%2) GPIO_WriteBit(GPIO_PORT_1, GPIO_PIN_6, 1);
 122   1        else GPIO_WriteBit(GPIO_PORT_1, GPIO_PIN_6, 0);*/
 123   1      }
 124          
 125          void timer2_int (void) interrupt 5
 126          {
 127   1        //P1_5 =~ P1_5;
 128   1        if(TIM2_GetITStatus(TIM2_Overflow_Flag))
 129   1        {
 130   2            TIM2_ClearITPendingBit(TIM2_Overflow_Flag);
 131   2        }
 132   1        
 133   1        if(TIM2_GetITStatus(TIM2_Reload_Flag))
 134   1        {
 135   2            TIM2_ClearITPendingBit(TIM2_Reload_Flag);
 136   2        }
 137   1        
 138   1        if(TIM2_GetITStatus(TIM2_OOC3_Flag))
 139   1        {
 140   2            TIM2_ClearITPendingBit(TIM2_OOC3_Flag);
 141   2        }
 142   1        
 143   1        if(TIM2_GetITStatus(TIM2_OOC2_Flag))
 144   1        {
 145   2            TIM2_ClearITPendingBit(TIM2_OOC2_Flag);
 146   2        }
 147   1        
 148   1        if(TIM2_GetITStatus(TIM2_OOC1_Flag))
 149   1        {
 150   2            TIM2_ClearITPendingBit(TIM2_OOC1_Flag);
 151   2        }
 152   1        
 153   1        if(TIM2_GetITStatus(TIM2_OOC0_Flag))
 154   1        {
 155   2            TIM2_ClearITPendingBit(TIM2_OOC0_Flag);
 156   2        }
 157   1      }
 158          
 159          void timer3_int (void) interrupt 15
 160          {
 161   1      
 162   1      }
 163          
 164          void timer4_int (void) interrupt 16
 165          {
 166   1      
 167   1      }
 168          
 169          void uart0_int (void) interrupt 4
 170          {
 171   1        
 172   1        if(UART_GetITStatus(UART0, Send_IT_Status))
 173   1        {
 174   2            UART_ClearITPendingBit(UART0, Send_IT_Status);
 175   2        }
 176   1        
 177   1        if(UART_GetITStatus(UART0, Receive_IT_Status))
C51 COMPILER V9.59.0.0   CMS8S003X_ITC                                                     06/27/2018 00:53:09 PAGE 4   

 178   1        {
 179   2            UART_ClearITPendingBit(UART0, Send_IT_Status);
 180   2        }
 181   1      }
 182          
 183          void uart1_int (void) interrupt 6
 184          {
 185   1        if(UART_GetITStatus(UART1, Send_IT_Status))
 186   1        {
 187   2            UART_ClearITPendingBit(UART1, Send_IT_Status);
 188   2        }
 189   1        
 190   1        if(UART_GetITStatus(UART1, Receive_IT_Status))
 191   1        {
 192   2            UART_ClearITPendingBit(UART1, Send_IT_Status);
 193   2        }
 194   1      }
 195          
 196          void pwm_int (void) interrupt 18
 197          {
 198   1        if(EPWM_GetPeriodITStatus(EPWM0_PeriodIT))
 199   1        {
 200   2            EPWM_ClearPeriodITStatus(EPWM0_PeriodIT);
 201   2        }
 202   1        
 203   1        if(EPWM_GetPeriodITStatus(EPWM1_PeriodIT))
 204   1        {
 205   2            EPWM_ClearPeriodITStatus(EPWM1_PeriodIT);
 206   2        }
 207   1        
 208   1        if(EPWM_GetPeriodITStatus(EPWM2_PeriodIT))
 209   1        {
 210   2            EPWM_ClearPeriodITStatus(EPWM2_PeriodIT);
 211   2        }
 212   1        
 213   1        if(EPWM_GetZeroITStatus(EPWM3_ZeroIT))
 214   1        {
 215   2            EPWM_ClearZeroITStatus(EPWM3_ZeroIT);
 216   2        }
 217   1        
 218   1        if(EPWM_GetZeroITStatus(EPWM4_ZeroIT))
 219   1        {
 220   2            EPWM_ClearZeroITStatus(EPWM4_ZeroIT);
 221   2        }
 222   1        
 223   1        if(EPWM_GetZeroITStatus(EPWM5_ZeroIT))
 224   1        {
 225   2            EPWM_ClearZeroITStatus(EPWM5_ZeroIT);
 226   2        }
 227   1      }
 228          
 229          void iic_int()  interrupt 21
 230          {
 231   1         if(IIC_GetITStatus(IIC_IT))  //Whether generate iic interrupt or not  
 232   1         {
 233   2            if(_SET == IIC_GetFlagStatus(IIC_Flag_Master_IT))
 234   2            {
 235   3              IIC_SendTimes++;
 236   3              
 237   3              if(IIC_SendTimes < 5)
 238   3              {
 239   4                IIC_MasterSendData(0x55);
C51 COMPILER V9.59.0.0   CMS8S003X_ITC                                                     06/27/2018 00:53:09 PAGE 5   

 240   4              }
 241   3              IIC_Stop();
 242   3            }
 243   2         }
 244   1      }
 245          
 246          void wdg_int()  interrupt 20
 247          {
 248   1        if(WDG_GetITStatus(WDG_Flag_Overflow))
 249   1        {
 250   2          WDG_ClearITPendingBit(WDG_Flag_Overflow);
 251   2        }
 252   1        
 253   1        if(WDG_GetITStatus(WDG_Flag_Reset))
 254   1        {
 255   2          WDG_ClearITPendingBit(WDG_Flag_Reset);
 256   2        }
 257   1      }
 258          
 259          /**
 260            * @}
 261            */
 262          
 263          /**
 264            * @}
 265            */
 266          
 267          /******************* (C) COPYRIGHT 2018 CMSemicon *****END OF FILE****/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    907    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

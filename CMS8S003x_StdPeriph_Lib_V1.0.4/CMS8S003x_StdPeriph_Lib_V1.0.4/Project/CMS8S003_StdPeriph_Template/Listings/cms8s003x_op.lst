C51 COMPILER V9.59.0.0   CMS8S003X_OP                                                      06/27/2018 00:53:09 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE CMS8S003X_OP
OBJECT MODULE PLACED IN .\Objects\cms8s003x_op.obj
COMPILER INVOKED BY: D:\Install software\keil5\C51\BIN\C51.EXE ..\..\Libraries\CMS8S003_StdPeriph_Driver\src\cms8s003x_o
                    -p.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\Libraries\CMS8S003_StdPeriph_Driver\inc) DEBUG PRINT(.\Listings\cms8s003x
                    -_op.lst) TABS(2) OBJECT(.\Objects\cms8s003x_op.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file    cms8s003x_op.c
   4            * @author  LI WEI
   5            * @version V1.0.3
   6            * @date    04/24/2018
   7            * @brief   This file provides all the OP firmware functions.
   8            ******************************************************************************
   9            * @copy
  10            *
  11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13            * TIME. AS A RESULT, CMSemicon SHALL NOT BE HELD LIABLE FOR ANY
  14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17            *
  18            * <h2><center>&copy; COPYRIGHT 2018 CMSemicon</center></h2>
  19            */
  20          
  21          /* Includes ------------------------------------------------------------------*/
  22          #include "cms8s003x_op.h"
  23          
  24          /** @addtogroup CMS8S003x_StdPeriph_Driver
  25            * @{
  26            */
  27          
  28          /* Private typedef -----------------------------------------------------------*/
  29          /* Private define ------------------------------------------------------------*/
  30          /* Private macro -------------------------------------------------------------*/
  31          /* Private variables ---------------------------------------------------------*/
  32          /* Private function prototypes -----------------------------------------------*/
  33          /* Private functions ---------------------------------------------------------*/
  34          
  35          /**
  36            * @addtogroup OP_Public_Functions
  37            * @{
  38            */
  39          
  40          /**
  41            * @brief  Deinitializes the OP peripheral registers to their default reset values.
  42            * @param  None.
  43            * @retval None.
  44            */
  45          void OP_DeInit(OP_TypeDef OPn)
  46          {
  47   1        if(OP0 == OPn)
  48   1        {
  49   2            OP0CON0 &= 0x00;
  50   2            OP0CON0 |= 0x20;
  51   2          
  52   2            OP0CON1 &= 0x00;
  53   2            OP0CON1 |= 0x10;
C51 COMPILER V9.59.0.0   CMS8S003X_OP                                                      06/27/2018 00:53:09 PAGE 2   

  54   2          
  55   2            OP0ADJE &= 0x00;
  56   2        }
  57   1        else if(OP1 == OPn)
  58   1        {
  59   2            OP1CON0 &= 0x00;
  60   2            OP1CON0 |= 0x20;
  61   2          
  62   2            OP1CON1 &= 0x00;
  63   2            OP1CON1 |= 0x10;
  64   2          
  65   2            OP1ADJE &= 0x00;
  66   2        }
  67   1      }
  68          
  69          /**
  70            * @brief  Initializes the comparator inverting input, output and speed.
  71            * @note   This function configures only COMP2.
  72            * @param  COMP_InvertingInput : selects the comparator inverting input and can
  73            *         be any of the @ref COMP_InvertingInput_Typedef enumeration.
  74            * @param  COMP_OutputSelect : selects the comparator output and can be any of
  75            *         the @ref COMP_OutputSelect_Typedef enumeation.
  76            * @param  COMP_Speed selects the comparator speed and can be any of the
  77            *         @ref COMP_Speed_TypeDef enumeration.
  78            * @retval None.
  79            */
  80          void OP_Init(OP_TypeDef OPn, OP_Init_TypeDef *OP_Init)
  81          {
  82   1        OP_DeInit(OPn);
  83   1        
  84   1        if(OP0 == OPn)
  85   1        {
  86   2            OP0CON0 = (((uint8_t)OP_Init->OP_EN << 7) | ((uint8_t)OP_Init->OP_Regulation << 6) | ((uint8_t)OP_Init-
             ->OP_Filtration << 5) | ((uint8_t)OP_Init->OP_OutCH << 4) | ((uint8_t)OP_Init->OP_PositiveCH << 2) | ((uint8_t)OP_Init->O
             -P_NegativeCH));
  87   2            OP0CON1 = (((uint8_t)OP_Init->OP_RegulationMode << 6) | ((uint8_t)OP_Init->OP_OffsetVoltage));
  88   2            OP0ADJE = ((uint8_t)OP_Init->OP_OffsetVoltageMode);
  89   2        }
  90   1        else if(OP1 == OPn)
  91   1        {
  92   2            OP1CON0 = (((uint8_t)OP_Init->OP_EN << 7) | ((uint8_t)OP_Init->OP_Regulation << 6) | ((uint8_t)OP_Init-
             ->OP_Filtration << 5) | ((uint8_t)OP_Init->OP_OutCH << 4) | ((uint8_t)OP_Init->OP_PositiveCH << 2) | ((uint8_t)OP_Init->O
             -P_NegativeCH));
  93   2            OP1CON1 = (((uint8_t)OP_Init->OP_RegulationMode << 6) | ((uint8_t)OP_Init->OP_OffsetVoltage));
  94   2            OP1ADJE = ((uint8_t)OP_Init->OP_OffsetVoltageMode);
  95   2        }
  96   1      }
  97          
  98          void OP_Cmd(OP_TypeDef OPn, FunctionalState NewState)
  99          {
 100   1        if (NewState != _DISABLE)
 101   1        {
 102   2          /* Enable the OP */
 103   2          if(OP0 == OPn)
 104   2          {
 105   3              OP0CON0 |= (uint8_t)OP_ENABLE_BIT;
 106   3          }
 107   2          else if(OP1 == OPn)
 108   2          {
 109   3              OP1CON0 |= (uint8_t)OP_ENABLE_BIT;
 110   3          }
 111   2        }
C51 COMPILER V9.59.0.0   CMS8S003X_OP                                                      06/27/2018 00:53:09 PAGE 3   

 112   1        else
 113   1        {
 114   2          /* Disable the OP */
 115   2          if(OP0 == OPn)
 116   2          {
 117   3              OP0CON0 |= (uint8_t)(~OP_ENABLE_BIT);
 118   3          }
 119   2          else if(OP1 == OPn)
 120   2          {
 121   3              OP1CON0 |= (uint8_t)(~OP_ENABLE_BIT);
 122   3          }
 123   2        }
 124   1      }
 125          
 126          uint8_t getOPResult(OP_TypeDef OPn)
 127          {
 128   1        uint8_t OP_OUT = 0;
 129   1        if(OP0 == OPn)
 130   1        {
 131   2            OP_OUT = ((OP0CON1 & 0x80) >> 7);
 132   2        }
 133   1        else if(OP1 == OPn)
 134   1        {
 135   2            OP_OUT = ((OP1CON1 & 0x80) >> 7);
 136   2        }
 137   1        
 138   1        return OP_OUT;
 139   1      }
 140          
 141          
 142          
 143          /**
 144            * @}
 145            */
 146          
 147          /**
 148            * @}
 149            */
 150          
 151          /******************* (C) COPYRIGHT 2018 CMSemicon *****END OF FILE****/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    383    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

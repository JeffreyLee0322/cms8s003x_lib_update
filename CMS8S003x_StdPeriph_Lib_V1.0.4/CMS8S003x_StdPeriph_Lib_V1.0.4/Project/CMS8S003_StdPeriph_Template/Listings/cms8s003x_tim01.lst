C51 COMPILER V9.59.0.0   CMS8S003X_TIM01                                                   06/27/2018 00:53:10 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE CMS8S003X_TIM01
OBJECT MODULE PLACED IN .\Objects\cms8s003x_tim01.obj
COMPILER INVOKED BY: D:\Install software\keil5\C51\BIN\C51.EXE ..\..\Libraries\CMS8S003_StdPeriph_Driver\src\cms8s003x_t
                    -im01.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\Libraries\CMS8S003_StdPeriph_Driver\inc) DEBUG PRINT(.\Listings\cms8s0
                    -03x_tim01.lst) TABS(2) OBJECT(.\Objects\cms8s003x_tim01.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file    cms8s003x_tim1.c
   4            * @author  LI WEI
   5            * @version V1.0.0
   6            * @date    04/24/2018
   7            * @brief   This file provides all the TIM1 firmware functions.
   8            ******************************************************************************
   9            * @copy
  10            *
  11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13            * TIME. AS A RESULT, CMSemicon SHALL NOT BE HELD LIABLE FOR ANY
  14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17            *
  18            * <h2><center>&copy; COPYRIGHT 2018 CMSemicon</center></h2>
  19            */
  20          
  21          /* Includes ------------------------------------------------------------------*/
  22          #include "cms8s003x_tim01.h"
  23          
  24          /** @addtogroup CMS8S003x_StdPeriph_Driver
  25            * @{
  26            */
  27          
  28          /* Private typedef -----------------------------------------------------------*/
  29          /* Private define ------------------------------------------------------------*/
  30          /* Private macro -------------------------------------------------------------*/
  31          /* Private variables ---------------------------------------------------------*/
  32          /* Private function prototypes -----------------------------------------------*/
  33          
  34          /**
  35            * @addtogroup TIM0_Public_Functions
  36            * @{
  37            */
  38          
  39          /**
  40            * @brief  Deinitializes the TIM0 peripheral registers to their default reset values.
  41            * @param  None
  42            * @retval None
  43            */
  44          void TIM0_DeInit(void)
  45          {
  46   1        TMOD &= 0xF0; //timer0 gate set 0
  47   1        TCON &= 0xCF; //timer0  control register clear
  48   1      }
  49          
  50          void TIM1_DeInit(void)
  51          {
  52   1        TMOD &= 0x0F; //timer1 gate set 0
  53   1        TCON &= 0x3F; //timer1  control register clear
C51 COMPILER V9.59.0.0   CMS8S003X_TIM01                                                   06/27/2018 00:53:10 PAGE 2   

  54   1      }
  55          
  56          void TIM0_Init(TIM01_Init_TypeDef *TIM0_InitDef)
  57          {
  58   1        TMOD &= 0xf0; //GATE0/CT0/TOM0 clear 0-3 bit
  59   1      
  60   1        //CKCON clear 3 bit
  61   1        CKCON &= 0xf7;
  62   1        
  63   1        //set GATE0 bit.
  64   1        //TMOD |= 0x08;
  65   1      
  66   1        //Set
  67   1        TMOD |= (((uint8_t)((TIM0_InitDef->Timer_Function) << 2)) | ((uint8_t)(TIM0_InitDef->Timer_Mode)));
  68   1        CKCON |= ((uint8_t)((TIM0_InitDef->Timer_Clock) << 3));
  69   1      
  70   1        if((TIM0_InitDef->Timer_Mode) == TIM01_Mode0_13Bit_Timer_Counter)
  71   1        {
  72   2          TH0 = (uint8_t)((TIM0_InitDef->Timer_InitValue)>>5);
  73   2          TL0 = (uint8_t)((TIM0_InitDef->Timer_InitValue)&0x1f);
  74   2        }else if((TIM0_InitDef->Timer_Mode) == TIM01_Mode1_16Bit_Timer_Counter)
  75   1        {
  76   2          TH0 = (uint8_t)((TIM0_InitDef->Timer_InitValue)>>8);
  77   2          TL0 = (uint8_t)((TIM0_InitDef->Timer_InitValue)&0xff);
  78   2        }else if((TIM0_InitDef->Timer_Mode) == TIM01_Mode2_8Bit_AutoLoad_Timer_Counter)
  79   1        {
  80   2          TH0 = (uint8_t)((TIM0_InitDef->Timer_InitValue)&0xff);
  81   2          TL0 = (uint8_t)((TIM0_InitDef->Timer_InitValue)&0xff);
  82   2        }else
  83   1        {
  84   2      
  85   2        }
  86   1      }
  87          
  88          void TIM1_Init(TIM01_Init_TypeDef *TIM1_InitDef)
  89          {
  90   1        TMOD &= 0x0f; //GATE1/CT1/T1M1 clear 4~7 bit
  91   1        
  92   1        //CKCON clear 4 bit
  93   1        CKCON &= 0xEF;
  94   1        
  95   1        //Set TMOD/CKCON
  96   1        TMOD |= (((uint8_t)((TIM1_InitDef->Timer_Function) << 6)) | ((uint8_t)(TIM1_InitDef->Timer_Mode << 4)));
  97   1        CKCON |= ((uint8_t)((TIM1_InitDef->Timer_Clock) << 4));
  98   1        
  99   1        if((TIM1_InitDef->Timer_Mode) == TIM01_Mode0_13Bit_Timer_Counter)
 100   1        {
 101   2          TH1 = (uint8_t)((TIM1_InitDef->Timer_InitValue)>>5);
 102   2          TL1 = (uint8_t)((TIM1_InitDef->Timer_InitValue)&0x1f);
 103   2        }else if((TIM1_InitDef->Timer_Mode) == TIM01_Mode1_16Bit_Timer_Counter)
 104   1        {
 105   2          TH1 = (uint8_t)((TIM1_InitDef->Timer_InitValue)>>8);
 106   2          TL1 = (uint8_t)((TIM1_InitDef->Timer_InitValue)&0xff);
 107   2        }else if((TIM1_InitDef->Timer_Mode) == TIM01_Mode2_8Bit_AutoLoad_Timer_Counter)
 108   1        {
 109   2          TH1 = (uint8_t)((TIM1_InitDef->Timer_InitValue)&0xff);
 110   2          TL1 = (uint8_t)((TIM1_InitDef->Timer_InitValue)&0xff);
 111   2        }else
 112   1        {
 113   2      
 114   2        }
 115   1      }
C51 COMPILER V9.59.0.0   CMS8S003X_TIM01                                                   06/27/2018 00:53:10 PAGE 3   

 116          
 117          void TIM0_Cmd(FunctionalState NewState)
 118          {
 119   1        if (NewState != _DISABLE)
 120   1        {
 121   2          TCON |= TIMER0_START_BIT; /* Enable the TIMER0*/
 122   2        }
 123   1        else
 124   1        {
 125   2          TCON &= (uint8_t)(~TIMER0_START_BIT); /* Disable the TIMER0*/
 126   2        }
 127   1      }
 128          
 129          void TIM1_Cmd(FunctionalState NewState)
 130          {
 131   1        if (NewState != _DISABLE)
 132   1        {
 133   2          TCON |= TIMER1_START_BIT; /* Enable the TIMER0*/
 134   2        }
 135   1        else
 136   1        {
 137   2          TCON &= (uint8_t)(~TIMER1_START_BIT); /* Disable the TIMER0*/
 138   2        }
 139   1      }
 140          
 141          
 142          void TIM0_ITConfig(TIM01_PriorityTypeDef TIM0_Priority, FunctionalState NewState)
 143          {
 144   1        IP &= 0xfd; //clear bit 1
 145   1        IP |= (TIM0_Priority<<1);
 146   1        
 147   1        /* Set the SPI IT mask Register */
 148   1        if (NewState != _DISABLE)
 149   1        {
 150   2          IE |= TIME0_INTERRUPT_ENABLE_BIT; /* Enable the SPI IT */
 151   2        }
 152   1        else
 153   1        {
 154   2          IE &= (uint8_t)(~TIME0_INTERRUPT_ENABLE_BIT); /* Disable the SPI IT */
 155   2        }
 156   1      }
 157          
 158          void TIM1_ITConfig(TIM01_PriorityTypeDef TIM1_Priority, FunctionalState NewState)
 159          {
 160   1        IP &= 0xf7; //clear bit 3
 161   1        IP |= (TIM1_Priority<<3);
 162   1        
 163   1        /* Set the SPI IT mask Register */
 164   1        if (NewState != _DISABLE)
 165   1        {
 166   2          IE |= TIME1_INTERRUPT_ENABLE_BIT; /* Enable the SPI IT */
 167   2        }
 168   1        else
 169   1        {
 170   2          IE &= (uint8_t)(~TIME1_INTERRUPT_ENABLE_BIT); /* Disable the SPI IT */
 171   2        }
 172   1      }
 173          
 174          /**
 175            * @brief  Gets the TIM1 Counter value.
 176            * @param  None
 177            * @retval Counter Register value.
C51 COMPILER V9.59.0.0   CMS8S003X_TIM01                                                   06/27/2018 00:53:10 PAGE 4   

 178            */
 179          uint16_t TIM0_GetCounter(void)
 180          {
 181   1        /* Get the Counter Register value */
 182   1        uint16_t tmpcntr = 0;
 183   1        uint8_t tmpcntrl = 0, tmpcntrh = 0;
 184   1      
 185   1        tmpcntrh = TH0;
 186   1        tmpcntrl = TL0;
 187   1      
 188   1        tmpcntr  = (uint16_t)(tmpcntrl);
 189   1        tmpcntr |= (uint16_t)((uint16_t)tmpcntrh << 8);
 190   1      
 191   1        /* Get the Counter Register value */
 192   1        return (uint16_t)tmpcntr;
 193   1      }
 194          
 195          uint16_t TIM1_GetCounter(void)
 196          {
 197   1        /* Get the Counter Register value */
 198   1        uint16_t tmpcntr = 0;
 199   1        uint8_t tmpcntrl = 0, tmpcntrh = 0;
 200   1      
 201   1        tmpcntrh = TH1;
 202   1        tmpcntrl = TL1;
 203   1      
 204   1        tmpcntr  = (uint16_t)(tmpcntrl);
 205   1        tmpcntr |= (uint16_t)((uint16_t)tmpcntrh << 8);
 206   1      
 207   1        /* Get the Counter Register value */
 208   1        return (uint16_t)tmpcntr;
 209   1      }
 210          /**
 211            * @brief  Checks whether the TIM1 interrupt has occurred or not.
 212            * @param  TIM1_IT specifies the TIM1 interrupt source to check.
 213            *   This parameter can be one of the @ref TIM1_IT_TypeDef enumeration.
 214            * @retval ITStatus The new state of the TIM1_IT(SET or RESET).
 215            */
 216          
 217          ITStatus TIM0_GetITStatus(void)
 218          {
 219   1        ITStatus bitstatus = _RESET;
 220   1      
 221   1        uint8_t TIM0_itStatus = 0x0;
 222   1      
 223   1        /* Check the parameters */
 224   1        //assert_param(IS_TIM1_GET_IT(TIM1_IT));
 225   1      
 226   1        TIM0_itStatus = (uint8_t)(TCON & 0x20);
 227   1      
 228   1        if (TIM0_itStatus != (uint8_t)_RESET )
 229   1        {
 230   2          bitstatus = _SET;
 231   2        }
 232   1        else
 233   1        {
 234   2          bitstatus = _RESET;
 235   2        }
 236   1        return (ITStatus)(bitstatus);
 237   1      }
 238          
 239          ITStatus TIM1_GetITStatus(void)
C51 COMPILER V9.59.0.0   CMS8S003X_TIM01                                                   06/27/2018 00:53:10 PAGE 5   

 240          {
 241   1        ITStatus bitstatus = _RESET;
 242   1      
 243   1        uint8_t TIM0_itStatus = 0x0;
 244   1      
 245   1        /* Check the parameters */
 246   1        //assert_param(IS_TIM1_GET_IT(TIM1_IT));
 247   1      
 248   1        TIM0_itStatus = (uint8_t)(TCON & 0x80);
 249   1      
 250   1        if (TIM0_itStatus != (uint8_t)_RESET )
 251   1        {
 252   2          bitstatus = _SET;
 253   2        }
 254   1        else
 255   1        {
 256   2          bitstatus = _RESET;
 257   2        }
 258   1        return (ITStatus)(bitstatus);
 259   1      }
 260          
 261          /**
 262            * @brief  Clears the TIM0's interrupt pending bits.
 263            * @param  TIM1_IT specifies the pending bit to clear.
 264            *   This parameter can be one of the @ref TIM1_IT_TypeDef enumeration.
 265            * @retval None.
 266            */
 267          void TIM0_ClearITPendingBit(void)
 268          {
 269   1        TCON &= 0xdf;
 270   1      }
 271          
 272          void TIM1_ClearITPendingBit(void)
 273          {
 274   1        TCON &= 0x7f;
 275   1      }
 276          /**
 277            * @}
 278            */
 279          
 280          /**
 281            * @}
 282            */
 283          
 284          /************************************ (C) COPYRIGHT 2018 CMSemicon *****END OF FILE****/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    379    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

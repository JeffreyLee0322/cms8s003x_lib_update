C51 COMPILER V9.59.0.0   CMS8S003X_FLASH                                                   06/27/2018 00:53:08 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE CMS8S003X_FLASH
OBJECT MODULE PLACED IN .\Objects\cms8s003x_flash.obj
COMPILER INVOKED BY: D:\Install software\keil5\C51\BIN\C51.EXE ..\..\Libraries\CMS8S003_StdPeriph_Driver\src\cms8s003x_f
                    -lash.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\Libraries\CMS8S003_StdPeriph_Driver\inc) DEBUG PRINT(.\Listings\cms8s0
                    -03x_flash.lst) TABS(2) OBJECT(.\Objects\cms8s003x_flash.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file    cms8s003x_flash.c
   4            * @author  LI WEI
   5            * @version V1.0.3
   6            * @date    04/24/2018
   7            * @brief   This file provides all the FLASH firmware functions.
   8            ******************************************************************************
   9            * @copy
  10            *
  11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13            * TIME. AS A RESULT, CMSemicon SHALL NOT BE HELD LIABLE FOR ANY
  14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17            *
  18            * <h2><center>&copy; COPYRIGHT 2018 CMSemicon</center></h2>
  19            */
  20          
  21          /* Includes ------------------------------------------------------------------*/
  22          #include "cms8s003x_flash.h"
  23          
  24          /** @addtogroup CMS8S003x_StdPeriph_Driver
  25            * @{
  26            */
  27          
  28          /* Private typedef -----------------------------------------------------------*/
  29          /* Private define ------------------------------------------------------------*/
  30          #define FLASH_OPERATION_ERROR   ((uint8_t)0x20)
  31          
  32          
  33          /* Private macro -------------------------------------------------------------*/
  34          /* Private variables ---------------------------------------------------------*/
  35          /* Private function prototypes -----------------------------------------------*/
  36          /* Private Constants ---------------------------------------------------------*/
  37          /* Public functions ----------------------------------------------------------*/
  38          
  39          /** @addtogroup FLASH_Public_functions
  40            * @{
  41            */
  42          
  43          /**
  44            * @brief  Deinitializes the FLASH registers to their default reset values.
  45            * @param  None
  46            * @retval None
  47            */
  48          void FLASH_DeInit(void)
  49          {
  50   1        MDATA |= 0xFF; //Flash data register deinit
  51   1        
  52   1        MADRL &= 0x00; //Flash address Low register deinit
  53   1        MADRH &= 0x00; //Flash address High register deinit
C51 COMPILER V9.59.0.0   CMS8S003X_FLASH                                                   06/27/2018 00:53:08 PAGE 2   

  54   1        
  55   1        MCTRL &= 0x00; //Flash control register deinit
  56   1        MCTRL |= 0x10;
  57   1      }
  58          
  59          /**
  60            * @brief  Programs one byte in program or data EEPROM memory
  61            * @param  Address : Address where the byte will be programmed
  62            * @param  Data : Value to be programmed
  63            * @retval None
  64            */
  65          void FLASH_ProgramByte(FLASH_Zone_TypeDef Flash_Zone, uint32_t Address, uint8_t Data)
  66          {
  67   1        uint8_t finishFlag = 0;
  68   1        
  69   1        /* Flash address config */
  70   1        MADRH = (uint8_t)(Address >> 8);
  71   1        MADRL = (uint8_t)Address;
  72   1        
  73   1        /* Judge Flash address whether 'FFH' or not */
  74   1        if((MCTRL & FLASH_ERROR_BIT) != 0)
  75   1        {
  76   2          return;
  77   2        }
  78   1        
  79   1        /* Flash data config */
  80   1        MDATA = Data;
  81   1        
  82   1        /* Enable flash R/W/E, Program mode, Zone select */
  83   1        //MCTRL &= 0x00;
  84   1        MCTRL = ((uint8_t)Flash_Zone | (uint8_t)Flash_OperationMode_Program | (uint8_t)FLASH_Enable_RWE);
  85   1        
  86   1        /* Wait flash program finished */
  87   1        /* If finishFlag=0, operation finished */
  88   1        while(MCTRL & 0x01);
  89   1      }
  90          
  91          /**
  92            * @brief  Programs one word (4 bytes) in program or data EEPROM memory
  93            * @param  Address : The address where the data will be programmed
  94            * @param  Data : Value to be programmed
  95            * @retval None
  96            */
  97          void FLASH_ProgramWord(FLASH_Zone_TypeDef Flash_Zone, uint32_t Address, uint32_t Data)
  98          {
  99   1        uint8_t i = 0;
 100   1        uint32_t MoveAddress = 0;
 101   1        
 102   1        MoveAddress = Address;
 103   1        /* Program mode, Zone select */
 104   1        MCTRL = ((uint8_t)Flash_Zone | (uint8_t)Flash_OperationMode_Program);
 105   1        
 106   1        for(i = 0; i < 4; i++)
 107   1        {
 108   2          MoveAddress += i;
 109   2          
 110   2          /* Flash address config */
 111   2          MADRH = (uint8_t)(MoveAddress >> 8);
 112   2          MADRL = (uint8_t)MoveAddress;
 113   2          
 114   2          /* Judge Flash address whether 'FFH' or not */
 115   2          if((MCTRL & FLASH_ERROR_BIT) != 0)
C51 COMPILER V9.59.0.0   CMS8S003X_FLASH                                                   06/27/2018 00:53:08 PAGE 3   

 116   2          {
 117   3            return;
 118   3          }
 119   2          
 120   2          /* Flash data config */
 121   2          MDATA = (uint8_t)(Data >> (8*i));
 122   2          
 123   2          /* Enable flash R/W/E */
 124   2          MCTRL |= ((uint8_t)FLASH_Enable_RWE);
 125   2          
 126   2          /* Wait flash program finished */
 127   2          /* If finishFlag=0, operation finished */
 128   2          while(MCTRL & 0x01);
 129   2        }
 130   1      }
 131          
 132          
 133          /**
 134            * @brief  Reads one byte from flash memory
 135            * @param  Address : Address to read
 136            * @retval Value of the byte
 137            */
 138          uint8_t FLASH_ReadByte(FLASH_Zone_TypeDef Flash_Zone, uint32_t Address)
 139          {
 140   1        uint8_t read_data = 0;
 141   1        
 142   1        /* Flash address config */
 143   1        MADRH = (uint8_t)(Address >> 8);
 144   1        MADRL = (uint8_t)Address;
 145   1      
 146   1        /* Enable flash R/W/E, Read mode, Zone select */
 147   1        MCTRL = ((uint8_t)Flash_Zone | (uint8_t)Flash_OperationMode_Read | (uint8_t)FLASH_Enable_RWE);
 148   1        
 149   1        /* Wait flash read finished */
 150   1        /* If finishFlag=0, operation finished */
 151   1        while(MCTRL & 0x01);
 152   1        
 153   1        /* Flash data result */
 154   1        read_data = MDATA;
 155   1        
 156   1        return read_data;
 157   1      }
 158          
 159          /**
 160            * @brief  Erases a block in the program or data memory.
 161            * @note   This function should be called and executed from RAM.
 162            * @param  FLASH_MemType :  The type of memory to erase
 163            * @param  BlockNum : Indicates the block number to erase
 164            * @retval None.
 165            */
 166          void FLASH_EraseBlock(FLASH_Zone_TypeDef Flash_Zone, uint32_t Address)
 167          {
 168   1        /* Flash address config */
 169   1        MADRH = (uint8_t)(Address >> 8);
 170   1        MADRL = (uint8_t)Address;
 171   1        
 172   1        /* Enable flash R/W/E, Erase mode, Zone select */
 173   1        MCTRL = ((uint8_t)Flash_Zone | (uint8_t)Flash_OperationMode_Erase | (uint8_t)FLASH_Enable_RWE);
 174   1        
 175   1        /* Wait flash erase finished */
 176   1        /* If finishFlag=0, operation finished */
 177   1        while(MCTRL & 0x01);
C51 COMPILER V9.59.0.0   CMS8S003X_FLASH                                                   06/27/2018 00:53:08 PAGE 4   

 178   1      }
 179          
 180          /**
 181            * @}
 182            */
 183          
 184          /**
 185            * @}
 186            */
 187          
 188          /******************* (C) COPYRIGHT 2018 CMSemicon *****END OF FILE****/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    245    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      30
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
